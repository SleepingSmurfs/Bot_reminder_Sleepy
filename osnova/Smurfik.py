import os
import time
import schedule
import threading
import telebot

from telebot import types
from datetime import datetime, timedelta
from database import Database
from dotenv import load_dotenv

load_dotenv()

bot = telebot.TeleBot(os.getenv('TOKEN'))
db = Database()

PRIORITY_EMOJIS = {
    5: "üî¥‚ÄºÔ∏è",
    4: "üü†",
    3: "üü°",
    2: "üü¢",
    1: "üîµ",
    0: "‚ö™"
}

def send_daily_reminders():
    users = db.get_all_users()
    for user_id in users:
        reminders = db.get_today_reminders(user_id)
        if reminders:
            message = "üìÖ *–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
            for reminder in reminders:
                for reminder in reminders:
                    id_, text, priority = reminder
                    emoji = PRIORITY_EMOJIS.get(priority, "")
                    message += f"{emoji} *{text}* (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}/5)\n\n"
            
            try:
                bot.send_message(user_id, message, parse_mode="Markdown")
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                
                
def scheduler():
    schedule.every().day.at("08:00").do(send_daily_reminders)
    # schedule.every().day.at("00:00").do(db.delete_old_reminders)
    
    while True:
        schedule.run_pending()
        time.sleep(1)

threading.Thread(target=scheduler, daemon=True).start()

@bot.message_handler(commands=['start'])
def start(message):
    user = message.from_user
    
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
    button2 = types.KeyboardButton('üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    button3 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
    button4 = types.KeyboardButton('üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö')
    markup.add(button1, button2, button3, button4)
    
    bot.send_message(
        message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç Sleepy_smurf –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–µ–Ω—å –Ω—É –∏ –≤—Å—é –Ω–µ–¥–µ–ª—é.\n"
        "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Å–ø–∏—Å–æ–∫ –¥–µ–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00.",
        reply_markup=markup
    )
    
@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
def add_reminder_step1(message):
    msg = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    bot.register_next_step_handler(msg, add_reminder_step2)
    
    
def add_reminder_step2(message):
    text = message.text
    if len(text) > 500:
        bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in range(6):
        markup.add(types.KeyboardButton(str(i)))
    
    msg = bot.send_message(
         message.chat.id,
        "–í—ã–±–µ—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0-5), –≥–¥–µ 0 - –Ω–∏–∑–∫–∏–π, 5 - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π:",
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, add_reminder_step3, text)
    
    
def add_reminder_step3(message, text):
    try:
        priority = int(message.text)
        if (priority < 0) or (priority > 5):
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 5")
        return
    
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in range(1, 8):
        markup.add(types.KeyboardButton(str(i)))
    
    
    msg = bot.send_message(
         message.chat.id,
         "–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (1-7)?",
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, add_reminder_step4, text, priority)


def add_reminder_step4(message, text, priority):
    try:
        days = int(message.text)
        if (priority < 1) or (priority > 7):
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –Ω–∞—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ 1 –¥–æ 7")
        return
    
    reminder_id = db.add_reminder(message.chat.id, text, priority, days)
    bot.send_message(
        message.chat.id,
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
        f"–¢–µ–∫—Å—Ç: {text}\n"
        f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
        f"–ê–∫—Ç–∏–≤–Ω–æ –¥–æ: {(datetime.now()+ timedelta(days=days)).strftime('%d.%m.%Y')}",
        reply_markup=types.ReplyKeyboardRemove()
    )


@bot.message_handler(func=lambda message: message.text == 'üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
def show_reminders(message):
    reminders = db.get_today_reminders(message.chat.id)
    if not reminders:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –≤–∞–ª—è–µ–º –¥—É—Ä–∞–∫–∞")
        return
    
    
    message_text = "üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n\n"
    for reminder in reminders:
        text, priority = reminder
        emoji = PRIORITY_EMOJIS.get(priority, "")
        message_text += f" {emoji} *{text}* (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}/5)\n\n"
    
    
    bot.send_message(
        message.chat.id,
        message_text,
        parse_mode="Markdown"
    )


# @bot.message_handler(func=lambda message: message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')


# @bot.message_handler(func=lambda message: message.text.startswith('–£–¥–∞–ª–∏—Ç—å #'))


# @bot.message_handler(commands=['history'])

if __name__ == '__main__':
    print("Bot is cooking!")
    bot.infinity_polling()