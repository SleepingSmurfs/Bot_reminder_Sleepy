import os
import time
import threading
import logging
from datetime import datetime, time as dt_time, timedelta
from dotenv import load_dotenv
import telebot
from telebot import types
from json_database import JSONDatabase
load_dotenv()
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot_errors.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(os.getenv('TOKEN'))
db = JSONDatabase('reminders_data.json')

PRIORITY_EMOJIS = {
    5: "üî¥‚ÄºÔ∏è",
    4: "üü†",
    3: "üü°",
    2: "üü¢",
    1: "üîµ",
    0: "‚ö™Ô∏è"
}

def send_daily_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        users = db.get_all_users()
        if not users:
            logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
            return

        for user_id in users:
            try:
                reminders = db.get_today_reminders(user_id)
                if not reminders:
                    continue
                    
                message = "üìÖ *–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:*\n\n"
                for reminder in reminders:
                    id_ = reminder['id']
                    text = reminder['text']
                    priority = reminder['priority']
                    emoji = PRIORITY_EMOJIS.get(priority, "")
                    message += f"{emoji} *{text}* (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}/5)\nID: {id_}\n\n"
                
                try:
                    bot.send_message(user_id, message, parse_mode="Markdown")
                except telebot.apihelper.ApiException as e:
                    logger.error(f"–û—à–∏–±–∫–∞ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                except Exception as e:
                    logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ send_daily_reminders: {e}")

def check_scheduled_tasks():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç scheduled –∑–∞–¥–∞—á–∏"""
    while True:
        now = datetime.now()
        current_time = now.time()
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ 8:00
        if current_time.hour == 8 and current_time.minute == 0:
            send_daily_reminders()
            time.sleep(60)
        
        if current_time.hour == 0 and current_time.minute == 0:
            db.delete_old_reminders()
            time.sleep(60)
        
        time.sleep(30)

threading.Thread(target=check_scheduled_tasks, daemon=True).start()

@bot.message_handler(commands=['start'])
def start(message):
    try:
        user = message.from_user
        db.add_user(user.id, user.username, user.first_name, user.last_name)
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
        btn2 = types.KeyboardButton('üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
        btn3 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
        btn4 = types.KeyboardButton('üóë –ò—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö')
        markup.add(btn1, btn2, btn3, btn4)
        
        bot.send_message(
            message.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ start: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
def add_reminder_step1(message):
    try:
        msg = bot.send_message(
            message.chat.id, 
            "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(msg, add_reminder_step2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_reminder_step1: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def add_reminder_step2(message):
    try:
        if not message.text or len(message.text.strip()) == 0:
            bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return
            
        text = message.text.strip()
        if len(text) > 500:
            bot.send_message(message.chat.id, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for i in range(6):
            markup.add(types.KeyboardButton(str(i)))
        
        msg = bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (0-5), –≥–¥–µ 0 - –Ω–∏–∑–∫–∏–π, 5 - –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π:",
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, add_reminder_step3, text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_reminder_step2: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")

def add_reminder_step3(message, text):
    try:
        priority = int(message.text)
        if priority < 0 or priority > 5:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 5")
        return
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for i in range(1, 8):
        markup.add(types.KeyboardButton(str(i)))
    
    msg = bot.send_message(
        message.chat.id,
        "–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (1-7)?",
        reply_markup=markup
    )
    bot.register_next_step_handler(msg, add_reminder_step4, text, priority)

def add_reminder_step4(message, text, priority):
    try:
        days = int(message.text)
        if days < 1 or days > 7:
            raise ValueError
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 7")
        return
    
    try:
        reminder_id = db.add_reminder(message.chat.id, text, priority, days)
        if not reminder_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
            
        expires_date = (datetime.now() + timedelta(days=days)).strftime('%d.%m.%Y')
        bot.send_message(
            message.chat.id,
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
            f"ID: {reminder_id}\n"
            f"–¢–µ–∫—Å—Ç: {text}\n"
            f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}\n"
            f"–ê–∫—Ç–∏–≤–Ω–æ –¥–æ: {expires_date}",
            reply_markup=types.ReplyKeyboardRemove()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ add_reminder_step4: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=types.ReplyKeyboardRemove()
        )

@bot.message_handler(func=lambda message: message.text == 'üìã –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
def show_reminders(message):
    try:
        reminders = db.get_today_reminders(message.chat.id)
        if not reminders:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")
            return
        
        message_text = "üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n\n"
        for reminder in reminders:
            id_ = reminder['id']
            text = reminder['text']
            priority = reminder['priority']
            emoji = PRIORITY_EMOJIS.get(priority, "")
            message_text += f"{emoji} *{text}* (–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}/5)\nID: {id_}\n\n"
        
        bot.send_message(
            message.chat.id,
            message_text,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_reminders: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
def ask_reminder_to_delete(message):
    try:
        reminders = db.get_today_reminders(message.chat.id)
        if not reminders:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for reminder in reminders:
            id_ = reminder['id']
            text = reminder['text']
            btn_text = f"‚ùå –£–¥–∞–ª–∏—Ç—å #{id_}: {text[:20]}..." if len(text) > 20 else f"‚ùå –£–¥–∞–ª–∏—Ç—å #{id_}: {text}"
            markup.add(types.KeyboardButton(btn_text))
        markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞"))
        
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ ask_reminder_to_delete: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.message_handler(func=lambda message: message.text.startswith('‚ùå –£–¥–∞–ª–∏—Ç—å #'))
def process_deletion(message):
    try:
        if message.text == "–û—Ç–º–µ–Ω–∞":
            bot.send_message(
                message.chat.id,
                "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=types.ReplyKeyboardRemove()
            )
            return
            
        reminder_id = int(message.text.split('#')[1].split(':')[0])
        
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"del_confirm_{reminder_id}"),
            types.InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="del_cancel")
        )
        
        bot.send_message(
            message.chat.id,
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?",
            reply_markup=markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_deletion: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=types.ReplyKeyboardRemove()
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('del_confirm_'))
def confirm_deletion(call):
    try:
        reminder_id = int(call.data.split('_')[-1])
        if db.delete_reminder(reminder_id, call.message.chat.id):
            bot.edit_message_text(
                "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
                call.message.chat.id,
                call.message.message_id
            )
        else:
            bot.edit_message_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                call.message.chat.id,
                call.message.message_id
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ confirm_deletion: {e}")
        bot.answer_callback_query(call.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")

@bot.callback_query_handler(func=lambda call: call.data == 'del_cancel')
def cancel_deletion(call):
    try:
        bot.edit_message_text(
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            call.message.chat.id,
            call.message.message_id
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_deletion: {e}")

@bot.message_handler(func=lambda message: message.text == 'üóë –ò—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö')
@bot.message_handler(commands=['history'])
def show_deleted_history(message):
    try:
        deleted = db.get_deleted_reminders(message.chat.id)
        if not deleted:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
            return
        
        response = "üóë *–ò—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:*\n\n"
        for item in deleted:
            original_id = item['original_id']
            text = item['text']
            priority = item['priority']
            deleted_at = datetime.fromisoformat(item['deleted_at'])
            reason = item['reason']
            
            response += (
                f"üîπ *ID:* {original_id}\n"
                f"üìù *–¢–µ–∫—Å—Ç:* {text}\n"
                f"üî¢ *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:* {priority}\n"
                f"üóì *–£–¥–∞–ª–µ–Ω–æ:* {deleted_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"‚ÑπÔ∏è *–ü—Ä–∏—á–∏–Ω–∞:* {reason}\n\n"
            )
        
        bot.send_message(
            message.chat.id,
            response,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_deleted_history: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")

def start_bot():
    while True:
        try:
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
            bot.infinity_polling()
        except KeyboardInterrupt:
            logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            db.close()
            break
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ: {e}")
            time.sleep(10)
            continue

if __name__ == '__main__':
    start_bot()